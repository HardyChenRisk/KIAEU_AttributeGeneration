## Import Spark and python libraries
# --additional-python-modules scikit-learn==0.21.3
import datetime
from pyspark import SparkContext
from pyspark.sql import SparkSession
# from pyspark.ml.linalg import Vectors
# from pyspark.ml.classification import LogisticRegression
# from pyspark.mllib.stat import Statistics
# from pyspark.ml.feature import StringIndexer
import pandas as pd
from io import StringIO
import boto3
import sys
# AWS Glue imports
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from timeit import default_timer as timer
from time import perf_counter
# %pyspark
from functools import reduce
from pyspark.sql import DataFrame
from pyspark.sql import SQLContext
from pyspark.sql.functions import *
from pyspark import SparkContext, SparkConf
from pyspark.sql import SparkSession
from pyspark.sql.types import *
from pyspark.sql.functions import lit
import pyspark.sql.functions as f
from pyspark.sql.functions import countDistinct
from pyspark.sql import Window
spark = (SparkSession
         .builder
         .config("spark.sql.session.timeZone", "UTC")
         .getOrCreate()
         )

sc = SparkContext.getOrCreate()
sqlContext = SQLContext(sc)
glueContext = GlueContext(sc)
spark = glueContext.spark_session
from pyspark.sql.functions import max
import matplotlib.pyplot as plt
import io
from io import StringIO
import boto3


###KIA###
KIA=sqlContext.read.csv("s3://telematics-dev-audit-us-east-1-375375715580/dionka01/Kia_Travelers_AdHoc/Kia_Travelers_AdHoc_20231025", header=True)
KIA = KIA.withColumn("SpeedChange",KIA.SpeedChange.cast(DoubleType()))
KIA = KIA.withColumn("Speed",KIA.Speed.cast(DoubleType()))
KIA_All = KIA.groupBy("VIN").count()

KIA_Brake = KIA.filter(col('SpeedChange') <= -2.638)


KIA_Brake_3 = KIA_Brake.filter(col('SpeedChange') <= -3)
KIA_Brake_3 = KIA_Brake_3.groupBy("VIN").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe3')
KIA_All = KIA_All.join(KIA_Brake_3, "VIN", "leftouter")

KIA_Brake_35 = KIA_Brake.filter(col('SpeedChange') <= -3.5)
KIA_Brake_35 = KIA_Brake_35.groupBy("VIN").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe35')
KIA_All = KIA_All.join(KIA_Brake_35, "VIN", "leftouter")

KIA_Brake_361 = KIA_Brake.filter(col('SpeedChange') <= -3.61)
KIA_Brake_361 = KIA_Brake_361.groupBy("VIN").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe361')
KIA_All = KIA_All.join(KIA_Brake_361, "VIN", "leftouter")

KIA_Brake_4 = KIA_Brake.filter(col('SpeedChange') <= -4)
KIA_Brake_4 = KIA_Brake_4.groupBy("VIN").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe4')
KIA_All = KIA_All.join(KIA_Brake_4, "VIN", "leftouter")

KIA_Brake_45 = KIA_Brake.filter(col('SpeedChange') <= -4.5)
KIA_Brake_45 = KIA_Brake_45.groupBy("VIN").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe45')
KIA_All = KIA_All.join(KIA_Brake_45, "VIN", "leftouter")

KIA_Brake_472 = KIA_Brake.filter(col('SpeedChange') <= -4.72)
KIA_Brake_472 = KIA_Brake_472.groupBy("VIN").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe472')
KIA_All = KIA_All.join(KIA_Brake_472, "VIN", "leftouter")

KIA_Brake_5 = KIA_Brake.filter(col('SpeedChange') <= -5)
KIA_Brake_5 = KIA_Brake_5.groupBy("VIN").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe5')
KIA_All = KIA_All.join(KIA_Brake_5, "VIN", "leftouter")

KIA_Acc = KIA.filter(col('SpeedChange') >= 2.638)
KIA_Acc_3 = KIA_Acc.filter(col('SpeedChange') >= 3)
KIA_Acc_3 = KIA_Acc_3.groupBy("VIN").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe3')
KIA_All = KIA_All.join(KIA_Acc_3, "VIN", "leftouter")

KIA_Acc_35 = KIA_Acc.filter(col('SpeedChange') >= 3.5)
KIA_Acc_35 = KIA_Acc_35.groupBy("VIN").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe35')
KIA_All = KIA_All.join(KIA_Acc_35, "VIN", "leftouter")

KIA_Acc_361 = KIA_Acc.filter(col('SpeedChange') >= 3.61)
KIA_Acc_361 = KIA_Acc_361.groupBy("VIN").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe361')
KIA_All = KIA_All.join(KIA_Acc_361, "VIN", "leftouter")

KIA_Acc_4 = KIA_Acc.filter(col('SpeedChange') >= 4)
KIA_Acc_4 = KIA_Acc_4.groupBy("VIN").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe4')
KIA_All = KIA_All.join(KIA_Acc_4, "VIN", "leftouter")

KIA_Acc_45 = KIA_Acc.filter(col('SpeedChange') >= 4.5)
KIA_Acc_45 = KIA_Acc_45.groupBy("VIN").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe45')
KIA_All = KIA_All.join(KIA_Acc_45, "VIN", "leftouter")

KIA_Acc_472 = KIA_Acc.filter(col('SpeedChange') >= 4.72)
KIA_Acc_472 = KIA_Acc_472.groupBy("VIN").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe472')
KIA_All = KIA_All.join(KIA_Acc_472, "VIN", "leftouter")

KIA_Acc_5 = KIA_Acc.filter(col('SpeedChange') >= 5)
KIA_Acc_5 = KIA_Acc_5.groupBy("VIN").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe5')
KIA_All = KIA_All.join(KIA_Acc_5, "VIN", "leftouter")

KIA_80 = KIA.filter(col('Speed') >= 35.7632)
KIA_80 = KIA_80.groupBy("VIN").count().withColumnRenamed('count', 'SecondsOverMph80')
KIA_All = KIA_All.join(KIA_80, "VIN", "leftouter")

KIA_75 = KIA.filter(col('Speed') >= 33.528)
KIA_75 = KIA_75.groupBy("VIN").count().withColumnRenamed('count', 'SecondsOverMph75')
KIA_All = KIA_All.join(KIA_75, "VIN", "leftouter")

KIA_80meter = KIA.filter(col('Speed') >= 35.7632)
KIA_80meter = KIA_80meter.groupBy("VIN").sum('Speed').withColumnRenamed('sum(speed)', 'MetersOverMph80')
KIA_All = KIA_All.join(KIA_80meter, "VIN", "leftouter")

KIA_75meter = KIA.filter(col('Speed') >= 33.528)
KIA_75meter = KIA_75meter.groupBy("VIN").sum('Speed').withColumnRenamed('sum(speed)', 'MetersOverMph75')
KIA_All = KIA_All.join(KIA_75meter, "VIN", "leftouter")

KIA_tripcount = KIA.dropDuplicates(['VIN', 'JourneyID'])
KIA_tripcount = KIA_tripcount.groupBy("VIN").count().withColumnRenamed('count', 'tripcount')
KIA_All = KIA_All.join(KIA_tripcount, "VIN", "leftouter")

KIA_AverageSpeed = KIA.groupBy("JourneyID").mean('Speed')
KIA_JourneyID = KIA.dropDuplicates(['VIN', 'JourneyID'])
KIA_AverageSpeed = KIA_AverageSpeed.join(KIA_JourneyID, "JourneyID", "leftouter")

KIA_AverageSpeed = KIA_AverageSpeed.groupBy("VIN").mean('avg(Speed)').withColumnRenamed('avg(avg(Speed))', 'meanavespeed')
KIA_All = KIA_All.join(KIA_AverageSpeed, "VIN", "leftouter")

output_path = 's3://analytics-telematics-tod-us-east-1-375375715580/chenha01/KIA_EU/KIA_EntityAttr_202211_MoreAttr/'
KIA_All.coalesce(1).write.save(output_path, format='csv', header=True)


