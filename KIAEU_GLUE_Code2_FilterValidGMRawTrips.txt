## Import Spark and python libraries
# --additional-python-modules scikit-learn==0.21.3
import datetime
from pyspark import SparkContext
from pyspark.sql import SparkSession
# from pyspark.ml.linalg import Vectors
# from pyspark.ml.classification import LogisticRegression
# from pyspark.mllib.stat import Statistics
# from pyspark.ml.feature import StringIndexer
import pandas as pd
from io import StringIO
import boto3
import sys
# AWS Glue imports
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from timeit import default_timer as timer
from time import perf_counter
# %pyspark
from functools import reduce
from pyspark.sql import DataFrame
from pyspark.sql import SQLContext
from pyspark.sql.functions import *
from pyspark import SparkContext, SparkConf
from pyspark.sql import SparkSession
from pyspark.sql.types import *
from pyspark.sql.functions import lit
import pyspark.sql.functions as f
from pyspark.sql.functions import countDistinct
from pyspark.sql import Window
spark = (SparkSession
         .builder
         .config("spark.sql.session.timeZone", "UTC")
         .getOrCreate()
         )

sc = SparkContext.getOrCreate()
sqlContext = SQLContext(sc)
glueContext = GlueContext(sc)
spark = glueContext.spark_session
from pyspark.sql.functions import max
import matplotlib.pyplot as plt
import io
from io import StringIO
import boto3

VIN202211=spark.read.parquet('s3://analytics-telematics-tod-us-east-1-375375715580/chenha01/KIA_EU/GM_Raw_Sample_VIN_202306/')
VIN202211 = VIN202211.select('vehicleUUID')
for counter in range(1,31):
    day = str(counter)
    day = ("0" + day) if len(day) == 1 else day
    path = 's3://telematics-us-prod-jnys-w-attribs/success/year=2023/month=06/day=' + day
    print(path)
    journeys_parquet = spark.read.json(path)
    df_att_final_all = journeys_parquet.select("journeyMetadata.vehicleUUID","journeyMetadata.journeyUUID",
                                        "journeyMetadata.sysClientId",
                                        "journeyMetadata.valid")
    df_att_final_all = df_att_final_all.filter(col('sysClientId') == 11012)                                                       
    df_att_final = df_att_final_all.filter(col('valid') == True)  	
    df_att_final = df_att_final.dropDuplicates() 
    df_att_final = VIN202211.join(df_att_final, "vehicleUUID", "inner")
    if day == '01':
        final = df_att_final
    else:
        final = final.union(df_att_final)   

final = final.dropDuplicates()
output_path = 's3://analytics-telematics-tod-us-east-1-375375715580/chenha01/KIA_EU/GM_Raw_Sample_Trip_202306/'
final.write.save(output_path, format='parquet', header=True)

#2022-11 1172862
#2023-6 1440543
    
     #"journeyMetadata.journeyUUID",
     #                                                   "journeyMetadata.externalJourneyId",   
