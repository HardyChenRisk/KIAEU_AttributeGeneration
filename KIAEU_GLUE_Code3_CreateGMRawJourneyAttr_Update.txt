## Import Spark and python libraries
# --additional-python-modules scikit-learn==0.21.3
import datetime
from pyspark import SparkContext
from pyspark.sql import SparkSession
# from pyspark.ml.linalg import Vectors
# from pyspark.ml.classification import LogisticRegression
# from pyspark.mllib.stat import Statistics
# from pyspark.ml.feature import StringIndexer
import pandas as pd
from io import StringIO
import boto3
import sys
# AWS Glue imports
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from timeit import default_timer as timer
from time import perf_counter
# %pyspark
from functools import reduce
from pyspark.sql import DataFrame
from pyspark.sql import SQLContext
from pyspark.sql.functions import *
from pyspark import SparkContext, SparkConf
from pyspark.sql import SparkSession
from pyspark.sql.types import *
from pyspark.sql.functions import lit
import pyspark.sql.functions as f
from pyspark.sql.functions import countDistinct
from pyspark.sql import Window
spark = (SparkSession
         .builder
         .config("spark.sql.session.timeZone", "UTC")
         .getOrCreate()
         )

sc = SparkContext.getOrCreate()
sqlContext = SQLContext(sc)
glueContext = GlueContext(sc)
spark = glueContext.spark_session
from pyspark.sql.functions import max
import matplotlib.pyplot as plt
import io
from io import StringIO
import boto3





for counter in range(1,31):
    VIN202211=spark.read.parquet('s3://analytics-telematics-tod-us-east-1-375375715580/chenha01/KIA_EU/GM_Raw_Sample_Trip_202306/')
    day = str(counter)
    day = ("0" + day) if len(day) == 1 else day
    path = 's3://telematics-us-prod-jnys-w-attribs/success/year=2023/month=06/day=' + day
    print(path)
    GM_Raw_Prod_Journey = sqlContext.read.json(path)
    GM_Raw_Journey_Attr = GM_Raw_Prod_Journey.select("journeyMetadata.journeyUUID", "journeyAttributes.modelAttributes.attributes.SHARED.SecondsBrakeMeterPerSecSquaredGe30","journeyAttributes.modelAttributes.attributes.SHARED.SecondsBrakeMeterPerSecSquaredGe35","journeyAttributes.modelAttributes.attributes.SHARED.SecondsBrakeMeterPerSecSquaredGe40","journeyAttributes.modelAttributes.attributes.SHARED.SecondsBrakeMeterPerSecSquaredGe45","journeyAttributes.modelAttributes.attributes.SHARED.SecondsBrakeMeterPerSecSquaredGe50","journeyAttributes.modelAttributes.attributes.SHARED.SecondsAccMeterPerSecSquaredGe30","journeyAttributes.modelAttributes.attributes.SHARED.SecondsAccMeterPerSecSquaredGe35","journeyAttributes.modelAttributes.attributes.SHARED.SecondsAccMeterPerSecSquaredGe40","journeyAttributes.modelAttributes.attributes.SHARED.SecondsAccMeterPerSecSquaredGe45","journeyAttributes.modelAttributes.attributes.SHARED.SecondsAccMeterPerSecSquaredGe50") 
    GM_Raw_Journey_Attr = GM_Raw_Journey_Attr.withColumnRenamed('SecondsAccMeterPerSecSquaredGe30', 'SecondsAccMeterPerSecSquaredGe30_Prod').withColumnRenamed('SecondsAccMeterPerSecSquaredGe35', 'SecondsAccMeterPerSecSquaredGe35_Prod').withColumnRenamed('SecondsAccMeterPerSecSquaredGe40', 'SecondsAccMeterPerSecSquaredGe40_Prod').withColumnRenamed('SecondsAccMeterPerSecSquaredGe45', 'SecondsAccMeterPerSecSquaredGe45_Prod').withColumnRenamed('SecondsAccMeterPerSecSquaredGe50', 'SecondsAccMeterPerSecSquaredGe50_Prod').withColumnRenamed('SecondsBrakeMeterPerSecSquaredGe30', 'SecondsBrakeMeterPerSecSquaredGe30_Prod').withColumnRenamed('SecondsBrakeMeterPerSecSquaredGe35', 'SecondsBrakeMeterPerSecSquaredGe35_Prod').withColumnRenamed('SecondsBrakeMeterPerSecSquaredGe40', 'SecondsBrakeMeterPerSecSquaredGe40_Prod').withColumnRenamed('SecondsBrakeMeterPerSecSquaredGe45', 'SecondsBrakeMeterPerSecSquaredGe45_Prod').withColumnRenamed('SecondsBrakeMeterPerSecSquaredGe50', 'SecondsBrakeMeterPerSecSquaredGe50_Prod')      
    GM_Raw_Journey_Attr = GM_Raw_Journey_Attr.dropDuplicates() 
	
    GM_Raw = GM_Raw_Prod_Journey.select("journeyMetadata.vehicleUUID", "journeyMetadata.journeyUUID",  explode('dataCollectionEnrichedAttributes').alias('dataCollections')) 
    GM_Raw = GM_Raw.dropDuplicates() 
	
    GM_Raw_Brake = GM_Raw.filter(GM_Raw.dataCollections.dataCollectionType == 'hardAccelerateOrBrake') 
    GM_Raw_Brake = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.hardaccel == False) 
    GM_Raw_Brake = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.valid == True) 
	
    GM_Raw_Brake30 = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.speedrateofchange >= 3.0) 
    GM_Raw_Brake30 = GM_Raw_Brake30.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe30')
    GM_Raw_Brake35 = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.speedrateofchange >= 3.5) 
    GM_Raw_Brake35 = GM_Raw_Brake35.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe35')
    GM_Raw_Brake361 = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.speedrateofchange >= 3.61) 
    GM_Raw_Brake361 = GM_Raw_Brake361.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe361')
    GM_Raw_Brake40 = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.speedrateofchange >= 4.0) 
    GM_Raw_Brake40 = GM_Raw_Brake40.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe40')
    GM_Raw_Brake45 = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.speedrateofchange >= 4.5) 
    GM_Raw_Brake45 = GM_Raw_Brake45.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe45')
    GM_Raw_Brake472 = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.speedrateofchange >= 4.72) 
    GM_Raw_Brake472 = GM_Raw_Brake472.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe472')
    GM_Raw_Brake50 = GM_Raw_Brake.filter(GM_Raw_Brake.dataCollections.speedrateofchange >= 5.0) 
    GM_Raw_Brake50 = GM_Raw_Brake50.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsBrakeMeterPerSecSquaredGe50')


    VIN202211 = VIN202211.join(GM_Raw_Brake30, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Brake35, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Brake361, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Brake40, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Brake45, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Brake472, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Brake50, "journeyUUID", "leftouter")
	
    GM_Raw_Acc = GM_Raw.filter(GM_Raw.dataCollections.dataCollectionType == 'hardAccelerateOrBrake') 
    GM_Raw_Acc = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.hardaccel == True) 
    GM_Raw_Acc = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.valid == True) 
	
    GM_Raw_Acc30 = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.speedrateofchange >= 3.0) 
    GM_Raw_Acc30 = GM_Raw_Acc30.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe30')
    GM_Raw_Acc35 = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.speedrateofchange >= 3.5) 
    GM_Raw_Acc35 = GM_Raw_Acc35.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe35')
    GM_Raw_Acc361 = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.speedrateofchange >= 3.61) 
    GM_Raw_Acc361 = GM_Raw_Acc361.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe361')
    GM_Raw_Acc40 = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.speedrateofchange >= 4.0) 
    GM_Raw_Acc40 = GM_Raw_Acc40.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe40')
    GM_Raw_Acc45 = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.speedrateofchange >= 4.5) 
    GM_Raw_Acc45 = GM_Raw_Acc45.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe45')
    GM_Raw_Acc472 = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.speedrateofchange >= 4.72) 
    GM_Raw_Acc472 = GM_Raw_Acc472.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe472')
    GM_Raw_Acc50 = GM_Raw_Acc.filter(GM_Raw_Acc.dataCollections.speedrateofchange >= 5.0) 
    GM_Raw_Acc50 = GM_Raw_Acc50.groupBy("journeyUUID").count().withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe50')

    VIN202211 = VIN202211.join(GM_Raw_Acc30, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Acc35, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Acc361, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Acc40, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Acc45, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Acc472, "journeyUUID", "leftouter")
    VIN202211 = VIN202211.join(GM_Raw_Acc50, "journeyUUID", "leftouter")
	
    VIN202211 = VIN202211.join(GM_Raw_Journey_Attr, "journeyUUID", "leftouter")
	
    output_path = 's3://analytics-telematics-tod-us-east-1-375375715580/chenha01/KIA_EU/GM_Raw_JourneyAttr_FromProdJourney/year=2023/month=06/day=' + day
    VIN202211.write.save(output_path, format='parquet', header=True)

#2022-11 1172862
#2023-6 1440543
    
     #"journeyMetadata.journeyUUID",
     #                                                   "journeyMetadata.externalJourneyId",   
