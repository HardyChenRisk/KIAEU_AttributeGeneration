## Import Spark and python libraries
# --additional-python-modules scikit-learn==0.21.3
import datetime
from pyspark import SparkContext
from pyspark.sql import SparkSession
# from pyspark.ml.linalg import Vectors
# from pyspark.ml.classification import LogisticRegression
# from pyspark.mllib.stat import Statistics
# from pyspark.ml.feature import StringIndexer
import pandas as pd
from io import StringIO
import boto3
import sys
# AWS Glue imports
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from timeit import default_timer as timer
from time import perf_counter
# %pyspark
from functools import reduce
from pyspark.sql import DataFrame
from pyspark.sql import SQLContext
from pyspark.sql.functions import *
from pyspark import SparkContext, SparkConf
from pyspark.sql import SparkSession
from pyspark.sql.types import *
from pyspark.sql.functions import lit
import pyspark.sql.functions as f
from pyspark.sql.functions import countDistinct
from pyspark.sql import Window
spark = (SparkSession
         .builder
         .config("spark.sql.session.timeZone", "UTC")
         .getOrCreate()
         )

sc = SparkContext.getOrCreate()
sqlContext = SQLContext(sc)
glueContext = GlueContext(sc)
spark = glueContext.spark_session
from pyspark.sql.functions import max
import matplotlib.pyplot as plt
import io
from io import StringIO
import boto3


GM2023=spark.read.parquet('s3://analytics-telematics-tod-us-east-1-375375715580/chenha01/KIA_EU/GM_Raw_EntityAttr_FromProdJourney/year=2023/')


GM_Raw_Acc30 = GM2023.groupBy("SecondsAccMeterPerSecSquaredGe30").count().withColumnRenamed('SecondsAccMeterPerSecSquaredGe30', 'VINCount').withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe30')
GM_Raw_Acc35 = GM2023.groupBy("SecondsAccMeterPerSecSquaredGe35").count().withColumnRenamed('SecondsAccMeterPerSecSquaredGe35', 'VINCount').withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe35')
GM_Raw_Acc40 = GM2023.groupBy("SecondsAccMeterPerSecSquaredGe40").count().withColumnRenamed('SecondsAccMeterPerSecSquaredGe40', 'VINCount').withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe40')
GM_Raw_Acc45 = GM2023.groupBy("SecondsAccMeterPerSecSquaredGe45").count().withColumnRenamed('SecondsAccMeterPerSecSquaredGe45', 'VINCount').withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe45')
GM_Raw_Acc50 = GM2023.groupBy("SecondsAccMeterPerSecSquaredGe50").count().withColumnRenamed('SecondsAccMeterPerSecSquaredGe50', 'VINCount').withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe50')
GM_Raw_Acc361 = GM2023.groupBy("SecondsAccMeterPerSecSquaredGe361").count().withColumnRenamed('SecondsAccMeterPerSecSquaredGe361', 'VINCount').withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe361')
GM_Raw_Acc472 = GM2023.groupBy("SecondsAccMeterPerSecSquaredGe472").count().withColumnRenamed('SecondsAccMeterPerSecSquaredGe472', 'VINCount').withColumnRenamed('count', 'SecondsAccMeterPerSecSquaredGe472')


VIN202211 = GM_Raw_Acc30.join(GM_Raw_Acc35, "VINCount", "outer")
VIN202211 = VIN202211.join(GM_Raw_Acc361, "VINCount", "outer")
VIN202211 = VIN202211.join(GM_Raw_Acc40, "VINCount", "outer")
VIN202211 = VIN202211.join(GM_Raw_Acc45, "VINCount", "outer")
VIN202211 = VIN202211.join(GM_Raw_Acc472, "VINCount", "outer")
VIN202211 = VIN202211.join(GM_Raw_Acc50, "VINCount", "outer")

	
output_path = 's3://analytics-telematics-tod-us-east-1-375375715580/chenha01/KIA_EU/GM_Raw_EntityAttr_CSV_2023Acc_updated'
VIN202211.coalesce(1).write.save(output_path, format='csv', header=True)

#2022-11 1172862
#2023-6 1440543
    
     #"journeyMetadata.journeyUUID",
     #                                                   "journeyMetadata.externalJourneyId",   
